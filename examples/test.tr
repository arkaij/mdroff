.\"
.\"
.ds TOC Оглавление
.ds DS "дата, подпись
.nr HI 9n
.nr PS 12
.nr VS \n[PS]+2
.\"
.ds Q \(Fo
.ds U \(Fc
.ds - \(em
.ds _ \(en
.char \[star] "\v'-0.2m'\(**\v'0.2m'
.\"
.\"
.DT "Программирование на языке Си" "Учебное пособие"
.DA "В.\|У. Волков"
.DF "Сыктывкарский Государственный Университет" "Сыктывкар"
.TC
.H1 "Введение в Си"
.H2 "Основные характеристики языка"
.PP
Язык программирования Си отличается минимализмом.
Авторы языка хотели, чтобы программы на нём легко компилировались
с помощью однопроходного компилятора,
чтобы каждой элементарной составляющей программы после компиляции
соответствовало весьма небольшое число машинных команд,
а использование базовых элементов языка не задействовало
библиотеку времени выполнения.
Однопроходный компилятор компилирует программу,
не возвращаясь назад, к уже обработанному тексту.
Поэтому использованию функции и переменных должно
предшествовать их объявление.
Код на Си можно легко писать на низком уровне абстракции,
почти как на ассемблере.
Иногда Си называют \*Qуниверсальным ассемблером\*U
или \*Qассемблером высокого уровня\*U,
что отражает различие языков ассемблера для разных платформ
и единство стандарта Си,
код которого может быть скомпилирован без изменений
практически на любой модели компьютера.
Си часто называют языком \*Iсреднего уровня\*P или даже \*Iнизкого уровня\*P,
учитывая то, как близко он работает к реальным устройствам.
Однако, в строгой классификации,
он является языком высокого уровня.
.PP
Компиляторы Си разрабатываются сравнительно легко благодаря
простоте языка и малому размеру стандартной библиотеки.
Поэтому данный язык доступен на самых различных платформах
(возможно, круг этих платформ шире, чем у любого другого существующего языка).
К тому же,
несмотря на свою низкоуровневую природу,
язык позволяет создавать переносимые программы и
поддерживает в этом программиста.
Программы, соответствующие стандарту языка,
могут компилироваться на самых различных компьютерах.
.H3 "Отсутствующие возможности"
.PP
Си (как и ОС UNIX, с которой он долгое время был связан)
создавался программистами и для программистов,
круг которых был бы ненамного шире круга разработчиков языка.
Несмотря на это,
область использования языка значительно шире задач системного программирования.
.PP
Си создавался с одной важной целью: сделать более простым
написание больших программ с минимумом ошибок
по правилам процедурного программирования,
не добавляя на итоговый код программ лишних накладных расходов
для компилятора,
как это всегда делают языки очень высокого уровня,
такие как Бейсик.
С этой стороны Си предлагает следующие важные особенности:
.RS
.PI \(bu
простую языковую базу,
из которой вынесены в библиотеки многие существенные возможности,
вроде математических функций или функций управления файлами;
.PI \(bu
ориентацию на процедурное программирование,
обеспечивающую удобство применения структурного стиля программирования;
.PI \(bu
систему типов, предохраняющую от бессмысленных операций;
.PI \(bu
использование препроцессора для,
например, определения макросов и включения файлов с исходным кодом;
.PI \(bu
непосредственный доступ к памяти компьютера через использование указателей;
минимальное число ключевых слов;
.PI \(bu
передачу параметров в функцию по значению,
а не по ссылке (при этом передача по ссылке эмулируется с помощью указателей);
.PI \(bu
указатели на функции и статические переменные;
.PI \(bu
области действия имён.
.RE
.PL
В то же время, в Си отсутствуют
.RS
.PI \(bu
вложенные функции;
.PI \(bu
сопрограммы;
.RE
а, также, средства:
.RS
.PI \(bu
автоматического управления памятью;
.PI \(bu
объектно-ориентированного программирования;
.PI \(bu
функционального программирования.
.RE
.PP
Часть отсутствующих возможностей относительно легко
имитируется встроенными средствами
(например, сопрограммы можно имитировать
с помощью функций \*(CWsetjmp\*P и \*(CWlongjmp\*P),
часть добавляется с помощью сторонних библиотек
(например, для поддержки многозадачности и для сетевых функций
можно использовать библиотеки pthreads, sockets и т. п.;
существуют библиотеки для поддержки автоматической сборки мусора\**),
.FS
URL: http://www.hpl.hp.com/personal/Hans_Boehm/gc/
.FE
часть реализуется в некоторых компиляторах в виде расширений языка
(например, вложенные функции в GCC).
.H2 "Распространение языка"
.PP
После появления язык Си был хорошо принят,
потому что он позволял быстро создавать компиляторы для новых платформ,
а также позволял программистам довольно точно представлять,
как выполняются их программы.
Благодаря этому программы, написанные на Си,
эффективнее написанных на многих других языках.
Как правило, лишь оптимизированный вручную код на ассемблере может
работать ещё быстрее,
потому что он даёт полный контроль над машиной,
однако развитие современных компиляторов вместе с усложнением
современных процессоров сократило этот разрыв.
.PP
Одним из последствий высокой эффективности и переносимости Си стало то,
что многие компиляторы,
интерпретаторы и библиотеки других языков высокого уровня
часто написаны на языке Си.
.KS
.sp 0.5v
.nf
.in \n[PI]u
.CW
$ \*Icc -Wall -o hello hello.c\*P
$ \*I\&./hello\*P
Hello, world!
$
.sp 0.5v
.KE
Многие элементы Си потенциально опасны,
а последствия неправильного использования этих элементов
зачастую непредсказуемы.
Керниган говорит: \*QСи \*- инструмент, острый, как бритва:
с его помощью можно создать и элегантную программу,
и кровавое месиво\*U\**.
.FS
Керниган Б., Ритчи Д. Язык программирования Си
= The C programming language. \*- 2-е изд. \*- М.:
Вильямс, 2007. \*- С. 304. \*- ISBN 0-13-110362-8
.FE
В связи со сравнительно низким уровнем языка многие случаи
неправильного использования опасных элементов не обнаруживаются
и не могут быть обнаружены ни при ко мпиляции,
ни во время исполнения.
Это часто приводит к непредсказуемому поведению программы.
Иногда в результате неграмотного использования элементов языка
появляются уязвимости в системе безопасности.
Необходимо заметить,
что использования многих таких элементов можно избежать.
.KS
.sp 0.5v
.in \n[PI]u
.nf
.CW
.ta T 2m
#include <stdio.h>

int
main(void)
{
	int i = 0;

        printf("Hello, World!");

	for (i = 0; i < 1; i++) {
		printf("\\n");
		break;
	}
	return 0;
}
.sp 0.5v
.PL
.ce 1
\*BПример 1.\*P Программа \*IHello, world\*P
.sp 1.5v
.KE
.
.H2 "Элементы Си"
.H3 "Типы"
.PP
Система типов в Си подобна типам в других потомках Алгола,
таких, как Паскаль.
В Си имеются типы целых чисел различных размеров
(\*(CWshort int\*P, \*(CWlong int\*P),
со знаком (\*(CWsigned\*P) и без (\*(CWunsigned\*P),
чисел с плавающей запятой (\*(CWfloat\*P, \*(CWdouble\*P),
символов, перечисляемых типов (\*(CWenum\*P) и записей-структур (\*(CWstruct\*P).
Кроме того,
язык Си предлагает тип объединение (\*(CWunion\*P),
с помощью которого можно либо хранить
в одном месте памяти разнородные данные,
не пересекающиеся по времени существования
(это позволяет экономить память),
либо обращаться к содержимому участка памяти,
как к данным разных типов
(что позволяет менять тип-интерпретацию данных, не меняя сами данные).
.PP
В языке возможно преобразование типов,
но оно не всегда происходит автоматически.
Только некоторые типы числовых данных полностью совместимы друг с другом.
При таком преобразовании компилятор может выдать только предупреждение.
Чтобы полностью обезопасить себя от ошибок такого рода,
можно использовать программу lint\**.
.FS
Stephen Johnson.
Lint, a C program checker.
Computer Science Technical Report 65, Bell Laboratories, December 1977.
.FE
.PP
На рис. 1 показан экран конфигурации.
.KF
.sp 1.5v
.PSPIC /home/sitkarev/Projects/rceinstall2.eps \n(.lu*6u/7u
.sp 0.5v
.PL
.ce 1
\*BРис. 1.\*P Экран конфигурации
.sp 1.5v
.ns
.KE
Все три этих способа хранения данных пригодны в различных ситуациях
и имеют свои преимущества и недостатки.
Например,
статическое выделение памяти не имеет накладных расходов по выделению,
автоматическое выделение \*- лишь малые расходы при выделении,
а вот динамическое выделение потенциально требует больших расходов
и на выделение,
и на освобождение памяти.
С другой стороны, память стека гораздо больше ограничена,
чем статическая или память в куче.
Только динамическая память может использоваться в случаях,
когда размер используемых объектов заранее неизвестен.
Большинство программ на Си интенсивно используют все три этих способа.
.PP
Там, где это возможно,
предпочтительным является автоматическое или статическое выделение памяти:
такой способ хранения объектов управляется компилятором,
что освобождает программиста от трудностей ручного выделения
и освобождения памяти, как правило,
служащего источником трудно отыскиваемых ошибок утечек памяти
и повторного освобождения в программе.
К сожалению, многие структуры данных имеют переменный размер
во время выполнения программы,
поэтому из-за того,
что автоматически и статически выделенные области должны
иметь известный фиксированный размер во время компиляции,
очень часто требуется использовать динамическое выделение.
Массивы переменного размера \*- самый распространённый пример
такого использования памяти.
.EQ
delim $$
.EN
.br
.nf
.di eq-div
.EQ
F(s) = mark int from {- inf} to {+ inf} f(t) e sup {-st} dt =
.EN
.sp 0.5v
.EQ
 = int from {- inf} to {+ inf} f(t) e sup {- ( j sigma + omega ) t } dt =
.EN
.sp 0.5v
.EQ
 = F( sigma , omega ) ^.
.EN
.br
.di
.chop eq-div
.tm dn=\n[dn] dl=\n[dl]
.nf
.mk eq-vstart
.ce 1000
.\"in +(\n(.lu-\n(dlu)/2uL
\*[eq-div]
.mk eq-vend
.tm eq-vstart=\n[eq-vstart] eq-vend=\n[eq-vend]
.sp |\n[eq-vstart]u
.sp \n[dn]u/2u
.in 0
.ta \n(.luR
	(1.1)
.fi
.rm eq-div
.sp |\n[eq-vend]u
.PP
The text continues here.
