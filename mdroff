#!/bin/sh

MDTMACPATH=/home/sitkarev/Projects/git/mdroff/tmac
#MDTMACPATH="tmac/"
reffile="/tmp/.mdroff-ref$$"
tocfile="/tmp/.mdroff-toc$$"
pgnfile="/tmp/.mdroff-pgn$$"
FIFO="/tmp/.mdroff-post$$"
GROTMP="/tmp/.mdroff-out$$"
MDPRETMP="/tmp/.mdroff-pre$$"

#
# mdpost -- filters label definitions and numbered headings
#
mdpost()
{
    awk -v reffile="$reffile" -v pgnfile="$pgnfile" '
/^LA:[ \t]/ {
	_FS = FS
	FS = "\t"
	$0 = $0
	printf "%s\t%s\t%s\t%s\n", $2, $3, $4, $5 >> reffile
	FS = _FS
	next
}

/^NH:[ \t]/ {
	FS_prev = FS
	FS = "\t"
	$0 = $0
	printf "%s\t%s\n", $2, $3 >> pgnfile
	FS = FS_prev
	next
}

{
	print $0
}'
}

mdpre()
{
    awk -v nofigures="$nofigures" -v reffile="$reffile" -v tocfile="$tocfile" -v pgnfile="$pgnfile" '
BEGIN {
	QUOTE = "\""
	SLASH = "\\"
	tocfile_sourced = 0

	H1 = 0; H2 = 0; H3 = 0; H4 = 0

	system("touch " reffile)

	_FS = FS
	FS = "\t"
	
	while ((getline < reffile) > 0) {
		if (NF < 4)
			continue
		name = $1
		mdref[name, "text"] = $2
		mdref[name, "page"] = $3
		mdref[name, "chapter"] = $4
	}

	close(reffile)
	system("rm -f " reffile)

	while ((getline < pgnfile) > 0) {
		if (NF < 2)
			continue
		h = $1; page = $2
		tocpg[h] = page
	}

	close(pgnfile);
	system("rm -f " pgnfile)

	FS = _FS
}

/^\.TC[ \t]*/ {
	if (tocfile_sourced) {
		print ".TC"
	} else {
		system("touch " tocfile)
		print ".so " tocfile
		tocfile_sourced = 1
		print ".TC"
		printf ".lf %d\n", NR
	}
	next
}

nofigures && /^\.FG / && $2 != "-box" {
	# Replace real EPS figures inserted by FG by rectangular boxes.
	file = $2
	if (file ~ /\.eps$/)
  		cmd = "head -n 10 " file \
		    " | awk '\''/^%%BoundingBox:/ { print $4 \" \" $5 }'\''"
	else
		cmd = "identify " file \
		    " | awk '\'' { l = $3; split(l, s, \"x\"); print s[1] \" \" s[2] }'\''"
	cmd | getline line
	split(line, s)
	s[1] = s[1] "p"; s[2] = s[2] "p"
	$1 = $1 " -box " s[1] " " s[2]
	print $0
	next
}

/^\.LA / {
	#   issue troff directive to print label definition,
	# page, and chapter
	#   prevent duplicated interpolation of 3-d argument
	# via temporary variable
	printf ".ds L@ \"%s\n", $3
	printf ".LA \\*(L@\n"
	printf ".tm LA:\t%s\t\\*(L@\t\\n%\t\\n[H1]\n", $2
	printf ".lf %d\n", NR
	next
}

/^\.LQ / {
	# get label and define label text, page, and chapter.
	name = $2
	print $0
	print ".ds LN " name
	if ((name, "text") in mdref) {
		print ".ds LT \"" mdref[name, "text"]
		print ".nr LP " mdref[name, "page"]
		print ".nr LC " mdref[name, "chapter"]
	} else {
		#print ".tm \\n(.F:" NR ": Warning! Label `" name "'\'' is not defined!"
	}
	printf ".lf %d\n", NR
	next
}

/^\.AP[ \t]*/ {
	H1 = 0; H2 = 0; H3 = 0;
	print ".ev toc\n" \
	      ".br\n" \
	      ".da toc-div\n" \
	      ".pr@reset\n" \
	      ".br\n" \
	      ".sp 0.3v\n" \
	      "\\s+4\\*[HNAPDX]\\s0\n" \
	      ".sp 0.3v\n" \
	      ".di\n" \
	      ".ev" >> tocfile
}

/^\.U[1-2] / {

	print $0

	level = substr($1, 3)+0

	if (level == 1) {
		U1++
		U2 = 0
		US = U1
	} else if (level == 2) {
		U2++
		US = US "." U2
	}

	if (level <= 2)
		printf ".tm NH:\tU\\*[HS]\t\\n[%]\n"

	line = stripquotes(substr($0, length($1)+1))

	if (level == 1) {
		if ((pgno = tocpg["U" US]) == "")
			pgno = "???"
		print ".XS\n" \
		      ".XA " pgno " 0n\n" \
		      ".sp 0.2v\n" \
		      "\\&\\s+2" line "\\s0\n" \
		      ".XE" >> tocfile
	}

	fflush(tocfile)

	printf ".lf %d\n", NR

	next
}

/^\.H[1-4] / || /^\.A[1-2] / {

	print $0

	level = substr($1, 3)+0
	
	if (substr($0, 2, 1) == "A")
		appendix = 1
	else
		appendix = 0

	if (level == 1) {
		H1++
		H2 = 0
		HS = H1
	} else if (level == 2) {
		H2++
		HS = H1 "." H2
	}
	HS = HS "."

	if (level <= 2) {
		if (!appendix)
			printf ".tm NH:\t\\*[HS]\t\\n[%]\n"
		else if (level == 1)
			printf ".tm NH:\\tA\\*[HS]\t\\n[%]\n"
	}
	
	line = stripquotes(substr($0, length($1)+1))

	if (!appendix) {
		if (level == 1) {
			 #".ds toc-ps \\*[TOCFONTSIZE]\n" \
			 #".lib@subfield toc-ps 0\n" \
			if ((pgno = tocpg[HS]) == "")
				pgno = "???"
			print ".ds toc-ps \\*[TOCFONTSIZE]\n" \
			      ".lib@subfield toc-ps 0" >>tocfile
			print ".XS\n" \
			      ".sp 0.3v\n" \
			      ".XA " pgno "\n" \
			      "\\s\\*[toc-ps]\\\n" \
			      ".XM \\s\\*[toc-ps]" HS "\\s0\n" \
			      "\\&" line "\n" \
			      "\\s0\n" \
			      ".XE\n" \
			      ".XS\n" \
			      ".sp 0.3v\n" \
			      ".XE" >> tocfile
		} else if (level == 2) {
			if ((pgno = tocpg[HS]) == "")
				pgno = "???"
			print ".ds toc-ps \\*[TOCFONTSIZE]\n" \
			      ".lib@subfield toc-ps 1" >>tocfile
			print ".XS\n" \
			      ".XA " pgno " 12n\n" \
			      "\\s\\*[toc-ps]\\\n" \
			      ".XM \\s\\*[toc-ps]" HS "\\s0\n" \
			      "\\&" line "\n" \
			      ".XE" >> tocfile
		}
	} else {
		if (level == 1) {
			if ((pgno = tocpg["A" HS]) == "")
				pgno = "???"
			print ".XS\n" \
			      ".XA " pgno " 12n\n" \
			      ".XM " HS "\n" \
			      "\\&" line "\n" \
			      ".XE" >> tocfile
		}
	}

	fflush(tocfile)

	printf ".lf %d\n", NR

	next
}

{
	print
}

function chr(s, i)
{
	return substr(s, i, 1)
}

# This function transforms troff-like quoted arguments into single
# string.
# The string
#	"\"Very very\" \"long long\" \"title\""
# becomes:
#	"Very very long long title"
# 
function stripquotes(input,	line, quote, sep, c, i)
{
	line = ""
	quote = 0
	sep = 0
	
	for (i = 1; c = chr(input, i); i++) {
		if (quote) {
			for ( ; c = chr(input, i); i++) {
				if (c == SLASH && chr(input, i+1) == QUOTE) {
					line = line QUOTE
					i += 1
					continue
				}
				if (c == QUOTE) {
					quote = 0
					#line = line " "
					break
				}
				line = line c
			}
		} else {
			while (chr(input, i) == " ")
				i++
			for ( ; c = chr(input, i); i++) {
				if (c == SLASH && chr(input, i+1) == QUOTE) {
					line = line QUOTE
					i += 1
					continue
				}
				if (c == " ") {
					line = line " "
					sep = 1
					break
				}
				if (c == QUOTE) {
					quote = 1
					if (!sep && line)
						line = line " "
					sep = 0
					break
				}
				line = line c
			}
		}
	}

	if (quote)
		print "mdroff: Warning! unterminated quote at line " NR > "/dev/stderr"

	return line
}

'
}

cleanup()
{
	rm -f "$FIFO" "$GROTMP" "$MDPRETMP"
	rm -f "$reffile" "$tocfile" "$pgnfile"
}

usage()
{
	cat <<-EOF
	Usage: mdroff [OPTIONS] FILE ...

	  -h		print help message
	  -d name=s	define string \`name' as \`s'
	  -e		preprocess with eqn
	  -g		preprocess with grn
	  -G		preprocess with grap
	  -n		replace pictures with rectangular boxes
	  -p		preprocess with pic
	  -r name=n	define register \`n' as \`n'
	  -R		preprocess with refer
	  -s		preprocess with soelim
	  -t		preprocess with tbl
	  -Tdev		set output device (\`ps' for PostScript or \`pdf' for PDF)
	
	Example:
	  $ mdroff -Tpdf -e -t example.tr >example.pdf

	EOF
}

gropost="grops"
precmdpipe="mdpre"
grocmdpipe="GROFF_TMAC_PATH=\"$MDTMACPATH\" groff \${GROFFOPTS}"
GROFFOPTS="-Z -Tps -dpaper=$(cat /etc/papersize) -md"

while getopts :d:eghnpr:stGRT: f
do
	case "$f" in
	d) GROFFOPTS="$GROFFOPTS -d $OPTARG";;
	e) grocmdpipe="eqn -d\\$\\$ | $grocmdpipe";;
	g) GROFFOPTS="$GROFFOPTS -g";;
	h) usage; exit 0;;
	n) nofigures=1;;
	p) GROFFOPTS="$GROFFOPTS -p";;
	r) GROFFOPTS="$GROFFOPTS -r $OPTARG";;
	s) GROFFOPTS="$GROFFOPTS -s";;
	t) GROFFOPTS="$GROFFOPTS -t";;
	G) GROFFOPTS="$GROFFOPTS -G";;
	R) GROFFOPTS="$GROFFOPTS -R";;
	T) case $OPTARG in
		ps)  ;;
		pdf) gropost="grops | ps2pdf -dEmbedAllFonts=false -dUseCIEColor=true -dPDFSETTINGS=/printer -";;
		*)   usage; exit 1;;
	   esac;;
	*) usage; exit 1;;
	esac
done

shift $((OPTIND-1))

test $# -lt 1 && { usage; exit 1; }

trap 'cleanup; exit 2;' INT QUIT
trap 'cleanup' 0

mkfifo -m660 "$FIFO" || { echo "failed to create FIFO" >&2; exit 1; }

if [ "$LC_ALL" = "ru_RU.UTF-8" -o "$LANG" = "ru_RU.UTF-8" ]; then
	GROFFOPTS="${GROFFOPTS} -mru"
	precmdpipe="soelim \"$@\" | iconv -f UTF-8 -t koi8-r | preconv -e koi8-r | $precmdpipe"
else
	precmdpipe="soelim \"$@\" | $precmdpipe"
fi

npass="0"
csum=""; csum2="-"

set -e

# Continuously run groff pipeline untill intermediate output converges (i.e. stops changing).
while [ "$csum" != "$csum2" ]; do
	csum2="$csum"
	# Remove previous TOC file, mdpre will generate it again.
	rm -f "$tocfile"
	eval "${precmdpipe}" 1>${MDPRETMP}
	# mdpost runs as a coprocess connected to standard error stream via FIFO.
	mdpost <"$FIFO" >&2 &
	eval "${grocmdpipe}" <${MDPRETMP} 2>${FIFO} 1>${GROTMP}
	# For safety, wait for mdpost to finish before calculation of
	# MD5 fingerprint of groff intermediate output.
	wait
	csum=$(md5sum "$GROTMP" | cut -d' ' -f1)
	npass=$((npass+1))
done

# Converged output is processed via groff device-specific
# driver (currently PostScript only).
eval "$gropost" <"$GROTMP"

#printf "Done in %d pass%s\n" $npass $(test $npass -gt 1 && echo "es") >&2

exit 0
